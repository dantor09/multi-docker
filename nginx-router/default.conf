# This nginx configuration defines how to route 
# requests to different services in our application
# This serves as a ROUTER (reverse proxy) rather than
# a web server

# defines an "upstream" service, in this case our 
# client is the react application
upstream client {
    server client:3000;
}

# defines an "upstream" service, in this case our
# client is the backend server (node.js) application listening 
# on port 4000
upstream api {
    server api:4000;
}

# the server directive defines nginx.

server {
    listen 80;

# any route that has / in it, redirect to client upstream
# defined above
    location / {
        proxy_pass http://client;
    }

# any route that has /api in it, redirect to api upstream
# defined above. This is when the react frontend makes requests
# to the backend server
    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }

# In our dev set up, the react application wants to make a web socket
# connection to our react application so this will redirect to the 
# upstream client defined above and ensures that changes are reflected
# with hot module replacement.
    location /ws {
      proxy_pass http://client;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
  }
}